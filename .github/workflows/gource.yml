---
name: Gource
on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/gource.yml'
      - 'ansible.cfg'
      - 'requirements.yml'
      - 'inventory/**'
      - 'playbooks/**'
      - 'roles/**'
  workflow_dispatch:
    inputs:
      skip_interval_hours:
        description: 'Skip interval in hours (default 24 hours)'
        required: false
        default: 24

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

jobs:
  gource:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if Gource video should be generated
        id: gource-check
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const workflowPath = '.github/workflows/gource.yml';
            const skipIntervalHours = parseInt('${{ github.event.inputs.skip_interval_hours }}') || 24;
            const skipIntervalSeconds = skipIntervalHours * 60 * 60;

            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflowPath,
              branch: 'main',
              per_page: 10
            });

            const successfulRun = runs.data.workflow_runs.find(run =>
              run.status === 'completed' && run.conclusion === 'success'
            );

            const now = new Date();
            let runJob = false;

            // Check if the workflow file was changed in the last commit
            const { data: lastCommit } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha
            });

            const fileChanged = lastCommit.files.some(f => f.filename === workflowPath);

            if (fileChanged) {
              core.info(`${workflowPath} was changed, will generate video.`);
              runJob = true;
            } else if (!successfulRun) {
              core.info('No successful run found, will generate video.');
              runJob = true;
            } else {
              const lastTime = new Date(successfulRun.created_at);
              const diff = (now - lastTime) / 1000;
              core.info(`Last successful run was ${Math.round(diff)} seconds ago.`);
              if (diff > skipIntervalSeconds) {
                core.info(`More than ${skipIntervalHours} hours ago, will generate video.`);
                runJob = true;
              } else {
                core.info(`Less than ${skipIntervalHours} hours ago, will skip generation.`);
              }
            }

            core.setOutput('run_job', runJob.toString());

      - name: Make a video of the repository history
        if: ${{ steps.gource-check.outputs.run_job == 'true' }}
        uses: nbprojekt/gource-action@57256d303c5a9a5e72ed92ba13e3e83c5ec8b257 # v1.3.0
        with:
          avatars_auto_fetch: true
          gource_title: ${{ github.repository }}

      - name: Install ffmpeg
        if: ${{ steps.gource-check.outputs.run_job == 'true' }}
        uses: AnimMouse/setup-ffmpeg@27e66fd2fe1d643b73a7c5cb105f3b4116bfb8db # v1.2.1

      - name: Generate thumbnail
        if: ${{ steps.gource-check.outputs.run_job == 'true' }}
        run: |
          echo "Generating thumbnail..."
          ffmpeg -y -i "./gource/gource.mp4" \
            -filter_complex "[0:v]select='not(mod(n,60))',setpts=0.1*PTS,fps=10,scale=320:-1:flags=lanczos" \
            -vsync vfr "./gource/gource.gif"

      - name: Upload video to S3
        if: ${{ steps.gource-check.outputs.run_job == 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          echo "Uploading video..."
          VIDEO="./gource/gource.mp4"
          BUCKET=gource-by-amedee
          VIDEO_KEY=gource-${{ github.sha }}.mp4

          aws s3 cp "$VIDEO" "s3://$BUCKET/$VIDEO_KEY" --content-type video/mp4
          aws s3api copy-object --bucket "$BUCKET" --copy-source "$BUCKET/$VIDEO_KEY" --key gource-latest.mp4 --content-type video/mp4

      - name: Upload thumbnail to S3
        if: ${{ steps.gource-check.outputs.run_job == 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          echo "Uploading thumbnail..."
          THUMB="./gource/gource.gif"
          BUCKET=gource-by-amedee
          THUMB_KEY=gource-${{ github.sha }}.gif

          aws s3 cp "$THUMB" "s3://$BUCKET/$THUMB_KEY" --content-type image/gif
          aws s3api copy-object --bucket "$BUCKET" --copy-source "$BUCKET/$THUMB_KEY" --key gource-latest.gif --content-type image/gif

      - name: Create Upload Summary
        if: ${{ steps.gource-check.outputs.run_job == 'true' }}
        run: |
          VIDEO_URL="https://gource-by-amedee.s3.us-east-1.amazonaws.com/gource-${{ github.sha }}.mp4"
          THUMB_URL="https://gource-by-amedee.s3.us-east-1.amazonaws.com/gource-${{ github.sha }}.gif"
          FILE_SIZE=$(du -h "./gource/gource.mp4" | cut -f1)
          COMMIT_MSG=$(git log -1 --pretty=%s)
          COMMIT_DATE=$(git log -1 --format=%cd --date=short)

          {
            echo "### 📽️ Gource Video Upload Summary"
            echo ""
            echo "![Preview]($THUMB_URL)"
            echo ""
            echo "- **Public URL:** [Click to view video]($VIDEO_URL)"
            echo "- **File size:** $FILE_SIZE"
            echo "- **Commit:** \`${{ github.sha }}\` – $COMMIT_MSG"
            echo "- **Commit date:** $COMMIT_DATE"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Use Artifact Upload as a Backup
        uses: actions/upload-artifact@v4
        if: ${{ steps.gource-check.outputs.run_job == 'true' }}
        with:
          name: gource-assets
          path: ./gource/gource.{mp4,gif}
          retention-days: 7

      - name: Clean up temporary files
        if: ${{ steps.gource-check.outputs.run_job == 'true' }}
        run: |
          echo "Cleaning up temporary files..."
          rm -f ./gource/gource.{mp4,gif}
