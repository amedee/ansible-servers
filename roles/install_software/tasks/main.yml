---
- name: Install all APT preferences (*.pref)
  ansible.builtin.copy:
    content: "{{ lookup('file', item) }}"
    dest: "/etc/apt/preferences.d/{{ item | basename }}"
    owner: root
    mode: u=rw,go=r
  loop: "{{ query('fileglob', playbook_dir + '/files/apt_prefs/*.pref') }}"

- name: Configure deb822-format APT repositories
  ansible.builtin.deb822_repository:
    name: "{{ item.name }}"
    types: "{{ item.repo.types | default(omit) }}"
    uris: "{{ item.repo.uris }}"
    suites: "{{ item.repo.suites }}"
    components: "{{ item.repo.components }}"
    signed_by: "{{ item.repo.signed_by }}"
    state: present
  loop: "{{ deb822_repositories }}"

- name: Check if APT lock files exist
  ansible.builtin.stat:
    path: "{{ item }}"
  loop:
    - /var/lib/apt/lists/lock
    - /var/lib/dpkg/lock
    - /var/lib/dpkg/lock-frontend
  register: install_software_lock_files_stat

- name: Wait for APT lock files to be released
  ansible.builtin.shell: |
    ! lsof "{{ item }}"
  loop: >
    {{
      install_software_lock_files_stat.results |
      selectattr('stat.exists', 'equalto', true) |
      map(attribute='stat.path') |
      list
    }}
  register: install_software_apt_lock_files_wait
  changed_when: false
  until: install_software_apt_lock_files_wait.rc == 0
  retries: 300
  delay: 1
  failed_when: install_software_apt_lock_files_wait.rc != 0

- name: Print which lock files are still in use (if any)
  ansible.builtin.debug:
    msg: "Lock file still in use: {{ item.item }}"
  loop: >
    {{
      install_software_apt_lock_files_wait.results |
      selectattr('rc', '!=', 0) |
      list
    }}
  when: install_software_apt_lock_files_wait is failed

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 86400 # One day
  register: install_software_apt_update
  retries: 3
  delay: 60
  until: install_software_apt_update is not failed

- name: Gather installed package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Hold all "grub-" packages (only in staging)
  ansible.builtin.command: "apt-mark hold {{ item }}"
  # yamllint disable-line rule:line-length
  with_items: "{{ ansible_facts.packages.keys() | select('match', '^grub-') | list }}"
  when:
    - hold_grub_packages | default(false)
    - item in ansible_facts.packages
    - "'hold' not in ansible_facts.packages[item]"
  changed_when: true

- name: Remove unneeded APT packages
  ansible.builtin.apt:
    state: absent
    pkg: "{{ apt_packages_uninstall }}"
  notify:
    - APT autoclean
    - APT autoremove

- name: Install APT packages
  ansible.builtin.apt:
    state: present
    pkg: "{{ apt_packages }}"
  notify:
    - APT autoclean
    - APT autoremove

- name: Upgrade all packages
  ansible.builtin.apt:
    upgrade: dist
  notify:
    - APT autoclean
    - APT autoremove

- name: Install snap packages
  community.general.snap:
    name: "{{ snap_packages }}"
